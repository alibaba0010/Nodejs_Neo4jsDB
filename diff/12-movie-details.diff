diff --git a/src/services/movie.service.js b/src/services/movie.service.js
index b43dce4..baad326 100644
--- a/src/services/movie.service.js
+++ b/src/services/movie.service.js
@@ -273,10 +273,41 @@ export default class MovieService {
    */
   // tag::findById[]
   async findById(id, userId = undefined) {
-    // TODO: Find a movie by its ID
+    // Find a movie by its ID
     // MATCH (m:Movie {tmdbId: $id})
 
-    return goodfellas
+    // Open a new database session
+    const session = this.driver.session()
+
+    // Find a movie by its ID
+    const res = await session.executeRead(async tx => {
+      const favorites = await this.getUserFavorites(tx, userId)
+
+      return tx.run(`
+        MATCH (m:Movie {tmdbId: $id})
+        RETURN m {
+          .*,
+          actors: [ (a)-[r:ACTED_IN]->(m) | a { .*, role: r.role } ],
+          directors: [ (d)-[:DIRECTED]->(m) | d { .* } ],
+          genres: [ (m)-[:IN_GENRE]->(g) | g { .name }],
+          ratingCount: size((m)<-[:RATED]-()),
+          favorite: m.tmdbId IN $favorites
+        } AS movie
+        LIMIT 1
+      `, { id, favorites })
+    })
+
+    // Close the session
+    await session.close()
+
+    // Throw a 404 if the Movie cannot be found
+    if (res.records.length === 0) {
+      throw new NotFoundError(`Could not find a Movie with tmdbId ${id}`)
+    }
+
+    const [first] = res.records
+
+    return toNativeTypes(first.get('movie'))
   }
   // end::findById[]
 
@@ -302,13 +333,39 @@ export default class MovieService {
    */
   // tag::getSimilarMovies[]
   async getSimilarMovies(id, limit = 6, skip = 0, userId = undefined) {
-    // TODO: Get similar movies based on genres or ratings
+    // Get similar movies based on genres or ratings
+    // MATCH (:Movie {tmdbId: $id})-[:IN_GENRE|ACTED_IN|DIRECTED]->()<-[:IN_GENRE|ACTED_IN|DIRECTED]-(m)
+
+    // Open an Session
+    const session = this.driver.session()
+
+    // Get similar movies based on genres or ratings
+    const res = await session.executeRead(async tx => {
+      const favorites = await this.getUserFavorites(tx, userId)
+
+      return tx.run(`
+        MATCH (:Movie {tmdbId: $id})-[:IN_GENRE|ACTED_IN|DIRECTED]->()<-[:IN_GENRE|ACTED_IN|DIRECTED]-(m)
+        WHERE m.imdbRating IS NOT NULL
+        WITH m, count(*) AS inCommon
+        WITH m, inCommon, m.imdbRating * inCommon AS score
+        ORDER BY score DESC
+        SKIP $skip
+        LIMIT $limit
+        RETURN m {
+          .*,
+          score: score,
+          favorite: m.tmdbId IN $favorites
+        } AS movie
+      `, { id, skip: int(skip), limit: int(limit), favorites })
+    })
+
+    // Get a list of Movies from the Result
+    const movies = res.records.map(row => toNativeTypes(row.get('movie')))
 
-    return popular.slice(skip, skip + limit)
-      .map(item => ({
-        ...item,
-        score: (Math.random() * 100).toFixed(2)
-      }))
+    // Close the session
+    await session.close()
+
+    return movies
   }
   // end::getSimilarMovies[]
 
